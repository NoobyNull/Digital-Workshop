name: PR Check - Pull Request Validation

on:
  pull_request:
    branches: [ develop, main ]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint pytest pytest-qt pytest-cov

      - name: Run comprehensive tests
        run: |
          pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term --cov-fail-under=80

      - name: Run linting with strict checks
        run: |
          pylint src/ --fail-under=8.5 --output-format=colorized --reports=y

      - name: Check for memory leaks (basic)
        run: |
          python -c "
          import gc
          import psutil
          import os
          # Basic memory leak detection
          initial = psutil.Process(os.getpid()).memory_info().rss
          for _ in range(5):
              gc.collect()
          final = psutil.Process(os.getpid()).memory_info().rss
          if final > initial * 1.05:  # 5% tolerance
              print('Warning: Potential memory increase detected')
              print(f'Initial: {initial}, Final: {final}')
          else:
              print('Memory leak check passed')
          "

      - name: Validate build configuration
        run: |
          # Check if build.py exists and is valid Python
          python -m py_compile build.py

          # Check if installer script exists
          if [ ! -f installer/inno_setup.iss ]; then
            echo "Error: Inno Setup script not found"
            exit 1
          fi

          # Check if required assets exist
          if [ ! -f installer/assets/license.txt ]; then
            echo "Warning: License file not found in installer/assets/"
          fi

          if [ ! -f installer/assets/readme.txt ]; then
            echo "Warning: Readme file not found in installer/assets/"
          fi

      - name: Check file permissions and structure
        run: |
          # Check for executable permissions on scripts
          if [ -x build.py ]; then
            echo "Warning: build.py has executable permissions"
          fi

          # Check for large files that shouldn't be in repo
          find . -type f -size +50M -not -path "./.git/*" | while read file; do
            echo "Warning: Large file found: $file"
          done

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: pr-check
          name: codecov-pr
          fail_ci_if_error: false

      - name: Comment PR with results
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}';
            const body = `### PR Validation Results\n\n**Status:** ${status}\n\n**Checks Performed:**\n- ✅ Code Quality (Pylint)\n- ✅ Test Coverage (80% minimum)\n- ✅ Memory Leak Detection\n- ✅ Build Configuration\n- ✅ File Structure\n\n${status === 'success' ? 'All checks passed! Ready for review.' : 'Some checks failed. Please review the workflow logs.'}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
